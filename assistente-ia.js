// IA Assistant - Integra√ß√£o avan√ßada
class ATA_Assistant {
  constructor() {
    this.isListening = false;
    this.assistantActive = false;
    this.loadModels();
    this.setupUI();
  }

  async loadModels() {
    // Carregar modelos de IA (simula√ß√£o - em produ√ß√£o seria via API)
    console.log("Carregando modelos de IA...");
    this.summarizerModel = await this.loadModel('summarizer');
    this.sentimentModel = await this.loadModel('sentiment-analysis');
    this.translationModel = await this.loadModel('translation');
    
    // Verificar suporte a Web Speech API
    this.speechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
    if (this.speechRecognition) {
      this.recognition = new this.speechRecognition();
      this.recognition.lang = 'pt-BR';
      this.recognition.interimResults = false;
      this.recognition.maxAlternatives = 1;
      
      this.recognition.onresult = (event) => {
        const speechResult = event.results[0][0].transcript;
        this.processVoiceCommand(speechResult);
      };
      
      this.recognition.onerror = (event) => {
        console.error('Erro no reconhecimento de voz:', event.error);
      };
    }
  }

  async loadModel(modelName) {
    // Simula√ß√£o de carregamento de modelo
    return new Promise(resolve => {
      setTimeout(() => {
        console.log(`Modelo ${modelName} carregado`);
        resolve({ predict: () => "Simula√ß√£o de IA" });
      }, 1000);
    });
  }

  setupUI() {
    // Criar interface do assistente
    this.assistantUI = document.createElement('div');
    this.assistantUI.id = 'ata-assistant';
    this.assistantUI.innerHTML = `
      <div class="assistant-container">
        <div class="assistant-avatar">
          <img src="assets/images/ai-avatar.png" alt="Assistente A.T.A">
          <div class="pulse-ring"></div>
        </div>
        <div class="assistant-content">
          <div class="assistant-messages" id="assistant-messages"></div>
          <div class="assistant-controls">
            <button id="toggle-assistant">Ativar Assistente</button>
            <button id="voice-command" disabled>üé§ Comando de Voz</button>
            <input type="text" id="assistant-input" placeholder="Pergunte ao assistente...">
            <button id="send-question">Enviar</button>
          </div>
        </div>
      </div>
    `;
    document.body.appendChild(this.assistantUI);
    
    // Event listeners
    document.getElementById('toggle-assistant').addEventListener('click', () => this.toggleAssistant());
    document.getElementById('voice-command').addEventListener('click', () => this.toggleVoiceRecognition());
    document.getElementById('send-question').addEventListener('click', () => this.processQuestion());
    document.getElementById('assistant-input').addEventListener('keypress', (e) => {
      if (e.key === 'Enter') this.processQuestion();
    });
  }

  toggleAssistant() {
    this.assistantActive = !this.assistantActive;
    const assistant = document.getElementById('ata-assistant');
    const toggleBtn = document.getElementById('toggle-assistant');
    
    if (this.assistantActive) {
      assistant.classList.add('active');
      toggleBtn.textContent = 'Desativar Assistente';
      document.getElementById('voice-command').disabled = false;
      this.addMessage('assistant', 'Ol√°! Sou o assistente de IA do Jornal A.T.A. Como posso ajudar?');
    } else {
      assistant.classList.remove('active');
      toggleBtn.textContent = 'Ativar Assistente';
      document.getElementById('voice-command').disabled = true;
    }
  }

  toggleVoiceRecognition() {
    if (!this.isListening) {
      this.recognition.start();
      this.isListening = true;
      document.getElementById('voice-command').classList.add('listening');
      this.addMessage('system', 'Ouvindo... (fale agora)');
    } else {
      this.recognition.stop();
      this.isListening = false;
      document.getElementById('voice-command').classList.remove('listening');
    }
  }

  addMessage(sender, message) {
    const messagesContainer = document.getElementById('assistant-messages');
    const messageElement = document.createElement('div');
    messageElement.classList.add('message', sender);
    
    if (sender === 'assistant') {
      messageElement.innerHTML = `
        <div class="message-avatar">
          <img src="assets/images/ai-avatar-small.png" alt="Assistente">
        </div>
        <div class="message-content">
          ${message}
        </div>
      `;
    } else {
      messageElement.innerHTML = `
        <div class="message-content">
          ${message}
        </div>
      `;
    }
    
    messagesContainer.appendChild(messageElement);
    messagesContainer.scrollTop = messagesContainer.scrollHeight;
  }

  async processQuestion() {
    const input = document.getElementById('assistant-input');
    const question = input.value.trim();
    
    if (question) {
      this.addMessage('user', question);
      input.value = '';
      
      // Mostrar "digitando..."
      const typingIndicator = document.createElement('div');
      typingIndicator.classList.add('message', 'assistant', 'typing');
      typingIndicator.innerHTML = `
        <div class="message-avatar">
          <img src="assets/images/ai-avatar-small.png" alt="Assistente">
        </div>
        <div class="message-content">
          <span class="typing-dots">
            <span>.</span><span>.</span><span>.</span>
          </span>
        </div>
      `;
      document.getElementById('assistant-messages').appendChild(typingIndicator);
      
      // Processar pergunta (simula√ß√£o)
      setTimeout(async () => {
        document.getElementById('assistant-messages').removeChild(typingIndicator);
        const response = await this.generateResponse(question);
        this.addMessage('assistant', response);
      }, 1500);
    }
  }

  async processVoiceCommand(command) {
    this.addMessage('user', command);
    this.isListening = false;
    document.getElementById('voice-command').classList.remove('listening');
    
    // Mostrar "digitando..."
    const typingIndicator = document.createElement('div');
    typingIndicator.classList.add('message', 'assistant', 'typing');
    typingIndicator.innerHTML = `
      <div class="message-avatar">
        <img src="assets/images/ai-avatar-small.png" alt="Assistente">
      </div>
      <div class="message-content">
        <span class="typing-dots">
          <span>.</span><span>.</span><span>.</span>
        </span>
      </div>
    `;
    document.getElementById('assistant-messages').appendChild(typingIndicator);
    
    // Processar comando de voz
    setTimeout(async () => {
      document.getElementById('assistant-messages').removeChild(typingIndicator);
      const response = await this.generateResponse(command);
      this.addMessage('assistant', response);
      this.speak(response);
    }, 1500);
  }

  async generateResponse(question) {
    // Simula√ß√£o de processamento de linguagem natural
    const lowerQuestion = question.toLowerCase();
    
    if (lowerQuestion.includes('not√≠cia') || lowerQuestion.includes('noticia')) {
      const summary = await this.generateNewsSummary();
      return `Aqui est√° um resumo das √∫ltimas not√≠cias:<br><br>${summary}`;
    }
    else if (lowerQuestion.includes('evento') || lowerQuestion.includes('agenda')) {
      return this.getUpcomingEvents();
    }
    else if (lowerQuestion.includes('traduzir') || lowerQuestion.includes('translate')) {
      return this.handleTranslationRequest(question);
    }
    else if (lowerQuestion.includes('ajuda') || lowerQuestion.includes('help')) {
      return this.getHelpInfo();
    }
    else {
      return this.getGenericResponse();
    }
  }

  async generateNewsSummary() {
    // Simula√ß√£o de resumo autom√°tico com IA
    const news = [
      "Prova Paulista 2025: Inscri√ß√µes abertas para o 2¬∞ bimestre",
      "Feira de Ci√™ncias: Alunos apresentam projetos inovadores",
      "Jogos Internos: Competi√ß√µes come√ßam no dia 20/07"
    ];
    
    // Simular resumo com IA
    const summary = await this.summarizerModel.predict(news.join('\n'));
    return summary || news.map(item => `‚Ä¢ ${item}`).join('<br>');
  }

  getUpcomingEvents() {
    const events = [
      { date: "15/06", title: "Reuni√£o de Pais", location: "Audit√≥rio" },
      { date: "01/07", title: "Feira de Ci√™ncias", location: "Quadra Coberta" },
      { date: "20/07", title: "Jogos Internos", location: "Quadras Esportivas" }
    ];
    
    return `Pr√≥ximos eventos:<br><br>${
      events.map(e => `<strong>${e.date}:</strong> ${e.title} (${e.location})`).join('<br>')
    }`;
  }

  async handleTranslationRequest(text) {
    // Extrair texto para traduzir (remover "traduzir")
    const translationText = text.replace(/traduzir|translate/gi, '').trim();
    
    if (translationText) {
      // Simular tradu√ß√£o com IA
      const translation = await this.translationModel.predict(translationText);
      return `Tradu√ß√£o para ingl√™s:<br><br>"${translationText}" ‚Üí "${translation || '[simula√ß√£o de tradu√ß√£o]'}"`;
    } else {
      return "Por favor, especifique o texto que deseja traduzir. Exemplo: 'traduzir onde fica a biblioteca?'";
    }
  }

  getHelpInfo() {
    return `Posso ajudar com:<br><br>
      ‚Ä¢ <strong>Not√≠cias</strong>: Resumir √∫ltimas not√≠cias<br>
      ‚Ä¢ <strong>Eventos</strong>: Listar pr√≥ximos eventos<br>
      ‚Ä¢ <strong>Tradu√ß√£o</strong>: Traduzir textos para ingl√™s<br>
      ‚Ä¢ <strong>D√∫vidas</strong>: Responder perguntas sobre a escola<br><br>
      Experimente dizer: "Quais as not√≠cias de hoje?" ou "Traduzir biblioteca"`;
  }

  getGenericResponse() {
    const responses = [
      "Interessante! Posso te ajudar com informa√ß√µes sobre not√≠cias, eventos ou outros assuntos da escola.",
      "Hmm, n√£o tenho certeza se entendi completamente. Voc√™ pode reformular?",
      "Posso pesquisar isso para voc√™. Enquanto isso, que tal dar uma olhada nas √∫ltimas not√≠cias?",
      "Minhas capacidades incluem resumir not√≠cias, listar eventos e responder perguntas sobre a escola."
    ];
    
    return responses[Math.floor(Math.random() * responses.length)];
  }

  speak(text) {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text.replace(/<[^>]*>/g, ''));
      utterance.lang = 'pt-BR';
      utterance.rate = 1.0;
      speechSynthesis.speak(utterance);
    }
  }

  // An√°lise de sentimento em coment√°rios
  async analyzeCommentSentiment(comment) {
    try {
      // Simula√ß√£o de an√°lise de sentimento
      const analysis = await this.sentimentModel.predict(comment);
      return {
        sentiment: analysis.sentiment || 'neutral',
        confidence: analysis.confidence || 0.8
      };
    } catch (error) {
      console.error("Erro na an√°lise de sentimento:", error);
      return { sentiment: 'neutral', confidence: 0 };
    }
  }

  // Modera√ß√£o de conte√∫do
  async moderateContent(text) {
    try {
      // Simula√ß√£o de modera√ß√£o
      const result = await this.sentimentModel.predict(text);
      return {
        approved: !result.isInappropriate,
        flags: result.flags || []
      };
    } catch (error) {
      console.error("Erro na modera√ß√£o de conte√∫do:", error);
      return { approved: true, flags: [] };
    }
  }
}

// Inicializar o assistente quando o DOM estiver pronto
document.addEventListener('DOMContentLoaded', () => {
  window.ATA_Assistant = new ATA_Assistant();
  
  // Integrar com o sistema de coment√°rios
  integrateCommentAnalysis();
  
  // Configurar recomenda√ß√µes personalizadas
  setupPersonalizedRecommendations();
});

// An√°lise de coment√°rios em tempo real
function integrateCommentAnalysis() {
  const commentInput = document.getElementById('comment-input');
  const submitComment = document.getElementById('submit-comment');
  
  if (commentInput && submitComment) {
    commentInput.addEventListener('input', async () => {
      const sentiment = await window.ATA_Assistant.analyzeCommentSentiment(commentInput.value);
      updateSentimentIndicator(sentiment);
    });
    
    submitComment.addEventListener('click', async () => {
      const moderation = await window.ATA_Assistant.moderateContent(commentInput.value);
      if (!moderation.approved) {
        alert("Seu coment√°rio cont√©m conte√∫do inapropriado. Por favor, revise.");
      } else {
        // Submeter coment√°rio
        alert("Coment√°rio enviado para modera√ß√£o!");
      }
    });
  }
}

function updateSentimentIndicator(sentiment) {
  let indicator = document.getElementById('sentiment-indicator');
  if (!indicator) {
    indicator = document.createElement('div');
    indicator.id = 'sentiment-indicator';
    document.getElementById('comment-form').appendChild(indicator);
  }
  
  indicator.innerHTML = `
    <span class="sentiment-${sentiment.sentiment}">
      Tom: ${sentiment.sentiment} (${Math.round(sentiment.confidence * 100)}%)
    </span>
  `;
}

// Sistema de recomenda√ß√µes personalizadas
function setupPersonalizedRecommendations() {
  // Simular hist√≥rico do usu√°rio
  const userHistory = {
    viewedNews: ['Prova Paulista', 'Feira de Ci√™ncias'],
    interests: ['educa√ß√£o', 'tecnologia', 'esportes']
  };
  
  // Gerar recomenda√ß√µes baseadas no perfil
  setTimeout(() => {
    const recommendations = generateRecommendations(userHistory);
    displayRecommendations(recommendations);
  }, 3000);
}

function generateRecommendations(history) {
  // Simular gera√ß√£o de recomenda√ß√µes com IA
  const allNews = [
    { id: 1, title: "Novo Laborat√≥rio de Rob√≥tica", tags: ["tecnologia", "educa√ß√£o"] },
    { id: 2, title: "Resultados dos Jogos Internos", tags: ["esportes"] },
    { id: 3, title: "Palestra sobre IA na Educa√ß√£o", tags: ["tecnologia", "educa√ß√£o"] },
    { id: 4, title: "Inscri√ß√µes para Olimp√≠ada de Matem√°tica", tags: ["educa√ß√£o"] }
  ];
  
  // Filtrar not√≠cias relevantes
  return allNews.filter(news => 
    news.tags.some(tag => history.interests.includes(tag)) ||
    !history.viewedNews.includes(news.title)
  ).slice(0, 3);
}

function displayRecommendations(recommendations) {
  const container = document.getElementById('recommendations-container');
  if (container && recommendations.length > 0) {
    container.innerHTML = `
      <h3>Recomendado para voc√™</h3>
      <div class="recommendations-list">
        ${recommendations.map(news => `
          <div class="recommendation-item">
            <a href="/news/${news.id}">${news.title}</a>
            <span class="recommendation-badge">‚≠ê Recomenda√ß√£o IA</span>
          </div>
        `).join('')}
      </div>
    `;
  }
                       }
